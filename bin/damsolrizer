#!/usr/bin/env ruby

require 'rubygems'
require 'optparse'
require 'stomp'

options = {}

optparse = OptionParser.new do|opts|
  opts.banner = "Usage: solrizer [options]"

  options[:hydra_home] = nil
  opts.on( '--hydra_home PATH', 'Load the Hydra instance  at this path' ) do |path|
    if File.exist?(File.join(path,"config","environment.rb"))
      options[:hydra_home] = path
    else 
      puts "#{path} does not appear to be a valid rails home"
      exit
    end
  end

  options[:port] = 61613
  opts.on('-p','--port NUM', 'Stomp port') do |port|
    options[:port] = port
  end

  options[:host] = 'localhost'
  opts.on('-o','--host HOSTNAME', 'Host to connect to') do |host|
    options[:host] = host
  end

  options[:user] = 'damsolrizer'
  opts.on('-u', '--user USERNAME', 'User name for stomp listener') do |user|
    options[:user] = user
  end

  options[:password] = 'damsolrizer'
  opts.on('-w', '--password PASSWORD', 'Password for stomp listener') do |password|
    options[:password] = password
  end

  options[:destination] = '/queue/Consumer.hydra.VirtualTopic.dams'
  opts.on('-d','--destination TOPIC', 'Topic to listen to') do |destination|
    options[:destination] = destination
  end

  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end
end

optparse.parse!

begin; require 'rubygems'; rescue; end

if options[:hydra_home]
  puts "Loading app..."
  Dir.chdir(options[:hydra_home])
  require File.join(options[:hydra_home],"config","environment.rb")

  puts "app loaded"
else
  $stderr.puts "The --hydra_home PATH option is mandatory. Please provide the path to the root of a valid Hydra instance."
  exit 1
end

puts "loading listener"
solropts = { :autocommit => false }

begin
  @port = options[:port] 
  @host = options[:host]
  @user = options[:user]
  @password = options[:password]
  @reliable = false
  @clientid = "damsolrizer"
  @destination = options[:destination]


  $stderr.print "Connecting to stomp://#{@host}:#{@port} as #{@user}\n"
  @conn = Stomp::Connection.open(@user, @password, @host, @port)
  $stderr.print "Getting output from #{@destination}\n"
  
  @conn.subscribe(@destination, {:ack =>"client" })
  while true
    @msg = @conn.receive
    pid = @msg.headers["pid"]
    method = @msg.headers["methodName"]

    puts @msg.headers.inspect
    puts "\nPID: #{@msg.headers["pid"]}\n"
    begin
      if ["addDatastream", "addRelationship","ingest","modifyDatastreamByValue","modifyDatastreamByReference","modifyObject","purgeDatastream","purgeRelationship"].include? method
        solrizer = Solrizer::Fedora::Solrizer.new
        solrizer.solrize @msg.headers["pid"], solropts
      elsif method == "purgeObject"
        ActiveFedora::SolrService.instance.conn.delete_by_id(pid)
      else
        $stderr.puts "Unknown Method: #{method}"
      end
      puts  "updated solr index for #{@msg.headers["pid"]}\n"
      @conn.ack @msg.headers["message-id"]
    rescue Exception => e
      Audit.create!(user: "solrizer@ucsd.edu", action: method, classname: "DamsSolrizer", object: pid )
      puts e.to_s
      e.backtrace.each do |line|
        puts line
      end
    end
  end
  @conn.join

rescue Exception => e
  p e
end

